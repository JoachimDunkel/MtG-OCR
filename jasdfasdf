[1mdiff --git a/src/Card_Identification/main_Card_Identification.py b/src/Card_Identification/main_Card_Identification.py[m
[1mindex 6073908..2bc44f4 100644[m
[1m--- a/src/Card_Identification/main_Card_Identification.py[m
[1m+++ b/src/Card_Identification/main_Card_Identification.py[m
[36m@@ -19,7 +19,7 @@[m [mimport re[m
 import colorama[m
 [m
 [m
[31m-from src.Card_Identification.img_from_adb import transfer_images_from_device[m
[32m+[m[32mfrom src.Card_Identification.img_from_adb import (transfer_images_from_device, transfer_newest_image)[m
 from src.Card_Identification.card_extraction import (extract_card, display_image)[m
 from src.Card_Identification.process_card import (create_rois_from_filename)[m
 from src.Card_Identification.process_rois import (return_cardname_from_ROI, display_cardname, delete_duplicate_ROIs)[m
[36m@@ -28,7 +28,6 @@[m [mfrom src.Card_Identification.path_manager import (get_path, PathType,return_fold[m
 from src.Card_Identification.save_results import (write_results_to_file)[m
 from src.Card_Identification.copy_img_to_data import (select_and_copy_images_to_data,move_content_to_subfolders)[m
 from src.Card_Identification.save_results import write_results_to_file[m
[31m-from src.Card_Identification.user_dialog_cardname import (user_cardname_confirmation)[m
 [m
 [m
 [m
[36m@@ -55,12 +54,53 @@[m [mdef process_images(all_images, card_data, mtg_ocr_config,scryfall_file, verbose)[m
             if cardnames is not None:[m
                updated_card_data = user_cardname_confirmation(filename, cardnames[0], card_data, card, scryfall_file, mtg_ocr_config)[m
                card_data = updated_card_data[m
[31m-               print(card_data)[m
[32m+[m[32m               if verbose > 10:[m
[32m+[m[32m                   print(card_data)[m
         else:[m
             continue[m
     [m
     return card_data[m
 [m
[32m+[m
[32m+[m[32mdef get_newest_image(directory):[m
[32m+[m[32m    """[m
[32m+[m[32m    returns the name of the newest image by file name change date of the specified[m
[32m+[m[32m    directory[m
[32m+[m
[32m+[m[32m    Parameters[m
[32m+[m[32m    ----------[m
[32m+[m[32m    directory : STR[m
[32m+[m[32m        relative or absolute directory where the function searches.[m
[32m+[m
[32m+[m[32m    Returns[m
[32m+[m[32m    -------[m
[32m+[m[32m    newest_image STR[m
[32m+[m[32m        returns the latest card from the folder[m
[32m+[m
[32m+[m[32m    """[m
[32m+[m[32m    if not os.path.isabs(directory):[m
[32m+[m[32m        directory = os.path.join(os.getcwd(), directory)  # Join with current working directory if not absolute[m
[32m+[m
[32m+[m[32m    image_files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f)) and f.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp'))][m
[32m+[m
[32m+[m[32m    if not image_files:[m
[32m+[m[32m        return None  # No image files found[m
[32m+[m
[32m+[m[32m    # Sort files by name to get the one with the highest timestamp[m
[32m+[m[32m    image_files.sort(reverse=True)[m
[32m+[m
[32m+[m[32m    newest_image = os.path.join(directory, image_files[0])  # Return absolute path to the newest image[m
[32m+[m[32m    return newest_image[m
[32m+[m
[32m+[m
[32m+[m[32mdef update_image_list(card_data):[m
[32m+[m[32m    identified_names = [item[0] for item in card_data["identified_names"]][m
[32m+[m[32m    unidentified_cards = card_data["unidentified_cards"][0][m
[32m+[m
[32m+[m[32m    card_data["unidentified_cards"][0] = [name for name in unidentified_cards if name not in identified_names][m
[32m+[m
[32m+[m[32m    return card_data[m
[32m+[m
 def main_Card_Identification(mode:str = None, verbose = 2):[m
     """[m
 [m
[36m@@ -102,36 +142,76 @@[m [mdef main_Card_Identification(mode:str = None, verbose = 2):[m
 [m
     elif mode == "all_images":[m
         all_images = return_folder_image_contents(get_path(PathType.RAW_IMAGE))[m
[31m-[m
         [m
[32m+[m[32m    elif mode == "adb-live":[m
[32m+[m[32m        pass[m
[32m+[m[32m        # transfer_newest_image(source_folder="MTG-OCR",verbose = 3)[m
[32m+[m[32m        # all_images = [get_newest_image(get_path(PathType.RAW_IMAGE))][m[41m    [m
[32m+[m[32m        # print(all_images)[m
     # main_Card_Identification()[m
     print("Main Func Of main_MtG-Card_Identification")[m
[31m-   [m
[31m-[m
[32m+[m[32m    print(mode)[m
 [m
     mtg_ocr_config = MtGOCRData()[m
     scryfall_file = mtg_ocr_config.open_scryfall_file(verbose )[m
   [m
[31m-    card_data = {"identified_cards": [], "unidentified_cards": []}[m
[31m-        [m
[31m-    while len(all_images) > 0:[m
[31m-        card_data = process_images(all_images, card_data, mtg_ocr_config,scryfall_file, verbose)[m
[31m-        card_data["identified_cards"].append(card_data["unidentified_cards"])[m
[31m-        all_images = card_data["unidentified_cards"][m
[31m-        print(f"The list of unidentified cards contains {len(card_data['unidentified_cards'])} elements.")[m
[31m-       [m
[31m-        card_data["unidentified_cards"] = [][m
[31m-        if len(all_images) > 0: print("Now redo the unidentified cards again.")[m
[32m+[m[32m    card_data = {"identified_cards": [], "unidentified_cards": [], "results": []}[m
[32m+[m[32m    # all_images = [][m
[32m+[m[32m    # # while len(all_images) > 0:[m
[32m+[m[32m    # images = 0[m
[32m+[m[32m    # while True:[m
[32m+[m[32m    #     if mode == "adb-live":[m
[32m+[m[32m    #         filename = transfer_newest_image(source_folder="MTG-OCR",verbose = 2)[m
[32m+[m
[32m+[m[32m    #         while all_images == []:[m
[32m+[m[32m    #             try:[m
[32m+[m[32m    #                 if os.path.exists(get_path(PathType.RAW_IMAGE,filename)):[m
[32m+[m[32m    #                     all_images = [get_path(PathType.RAW_IMAGE,filename)][m
[32m+[m[41m                    [m
[32m+[m[32m    #             except UnboundLocalError:[m
[32m+[m[32m    #                 pass[m
[32m+[m[32m    #             print("all_images",all_images)[m
[32m+[m[32m    #     else:[m
[32m+[m[32m    #         all_images = card_data["unidentified_cards"][m
[32m+[m[32m    #         card_data = update_image_list(card_data)[m
[32m+[m[32m    #         print(f"The list of unidentified cards contains {len(card_data['unidentified_cards'])} elements.")[m
[32m+[m[41m            [m
[32m+[m[32m    #     # transfer_newest_image(source_folder="MTG-OCR",verbose = 2)[m
[32m+[m[32m    #     card_data = process_images(all_images, card_data, mtg_ocr_config,scryfall_file, verbose)[m
[32m+[m[32m    #     print(card_data)[m
[32m+[m[32m    #     all_images = [][m
[32m+[m[32m    #     print("try carddata")[m
[32m+[m
[32m+[m[32m    all_images = [][m
[32m+[m[32m    # while len(all_images) > 0:[m
[32m+[m[32m    images = 0[m
[32m+[m[32m    while True:[m
[32m+[m[32m        if mode == "adb-live":[m
[32m+[m[32m            transfer_images_from_device(source_folder="MTG-OCR",verbose = 2)[m
[32m+[m[32m            all_images = return_folder_image_contents(get_path(PathType.RAW_IMAGE))[m
[32m+[m
[32m+[m[32m            # (source_folder="MTG-OCR",verbose = 2)[m
[32m+[m[32m            card_data = process_images(all_images, card_data, mtg_ocr_config,scryfall_file, verbose)[m
[32m+[m[32m            print(card_data)[m
[32m+[m[32m            all_images = [][m
[32m+[m[32m            print("try carddata")[m
[32m+[m[41m          [m
 [m
     write_results_to_file(card_data["identified_cards"],"identified_cards")[m
[32m+[m[32m    write_results_to_file(card_data["unidentified_cards"],"unidentified_cards")[m
[32m+[m[32m    write_results_to_file(card_data["results"],"results")[m
[32m+[m[41m    [m
     cv2.destroyAllWindows()[m
[31m-       [m
 [m
 [m
 if __name__ == "__main__":[m
 [m
     # cardnames = main_Card_Identification('adb')[m
[31m-    verbose = 0[m
[31m-    cardnames = main_Card_Identification('all_images', verbose)[m
[32m+[m[32m    verbose = 1[m
[32m+[m[32m    # cardnames = main_Card_Identification('all_images', verbose)[m
     # cardnames = main_Card_Identification('adb')[m
[32m+[m[32m    # main_Card_Identification('quickstart', verbose)[m
[32m+[m[32m    cardnames = main_Card_Identification('adb-live')[m
[41m+[m
[41m+[m
 [m
